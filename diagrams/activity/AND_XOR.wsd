@startuml and_xor_order_flow
title Процесс заказа: AND/XOR

start

partition "Клиент" {
  :Регистрация / авторизация;
}

partition "Система" {
  if (Учётные данные корректны?) then (да)
    :Подтверждение учётных данных;
  else (нет)
    :Сообщить об ошибке авторизации;
    stop
  endif
}

partition "Клиент" {
  :Выбор товаров и добавление в корзину;
  :Переход к оформлению;\nВыбор доставки и оплаты;
  :Ввод промокода (опционально);
}

partition "Система" {
  if (Промокод введён?) then (да)
    :Проверка условий скидки;
    if (Промокод валиден?) then (да)
      :Применить скидку;\nОбновить сумму;
    else (нет)
      :Уведомить о проблеме с промокодом;
    endif
  endif

  :Проверка наличия каждого товара на складе;
  if (Все товары доступны?) then (да)
  else (нет)
    :Уведомление о недоступности товара;

    partition "Клиент" {
      if (Решение клиента?) then (Альтернатива/Удалить)
        :Выбор альтернативы\nили удаление позиции;
        if (Корзина пустая?) then (да)
          :Отмена заказа;
          stop
        else (нет)
          :Продолжить оформление;
        endif
      else (Ожидать поступления)
        partition "Система" {
          :Статус позиции = «Ожидание поступления»;
          while (Товар поступил?) is (нет)
            :Мониторинг наличия;
          endwhile (да)
          :Автоматическое уведомление клиента\nо поступлении товара;
        }
        partition "Клиент" {
          :Подтвердить продолжение оформления;
        }
      endif
    }
  endif
}

fork
  partition "Оплата" {
    :Подтверждение оплаты клиентом;
    :Проверка платежных данных;\nТранзакция;
    if (Оплата прошла?) then (да)
      :Статус оплаты = Успех;
    else (нет)
      :Статус оплаты = Ошибка;
      :Уведомление о проблеме;\nПредложить другой способ / повтор;
      if (Клиент отказывается?) then (да)
        :Отмена заказа;\nВозврат средств (если списаны);
        stop
      else (нет)
        :Повторить оплату / изменить способ;
      endif
    endif
  }
fork again
  partition "Склад" {
    :Уведомить склад о сборке;
    :Комплектация заказа;
    :Статус сборки = Готово;
  }
end fork

partition "Синхронизация оплаты и сборки" {
if (Оплата=Успех и Сборка=Готово?) then (да)
  :Генерация счёт-фактуры;
  :Уведомление клиенту: подтверждение и статус доставки;
  :Статус заказа = «Отправлен»;
else (нет)
  if (Оплата=Ошибка?) then (да)
    :Уведомление клиенту о проблеме с платежом;
    :Предложить повторить оплату\nили изменить способ оплаты;
    if (Клиент не согласен?) then (да)
      :Отмена заказа;
      :Возврат средств (если были списаны);
      stop
    else (нет)
      :Повторная попытка оплаты / смена способа;
      :Проверка статуса оплаты;
      if (Оплата прошла?) then (да)
        if (Сборка=Готово?) then (да)
          :Генерация счёт-фактуры;
          :Уведомление клиенту: подтверждение и статус доставки;
          :Статус заказа = «Отправлен»;
        else (нет)
          :Ожидание готовности склада / уточнение наличия;
          :После готовности — генерация счёт-фактуры и уведомление;
          :Статус заказа = «Отправлен»;
        endif
      else (нет)
        :Клиент может повторить попытку ещё раз\nили отказаться (см. выше);
      endif
    endif
  else (нет)
    :Ожидание готовности склада / уточнение наличия;
    if (Сборка=Готово?) then (да)
      if (Оплата=Успех?) then (да)
        :Генерация счёт-фактуры;
        :Уведомление клиенту: подтверждение и статус доставки;
        :Статус заказа = «Отправлен»;
      else (нет)
        :Ожидание успешной оплаты (см. ветку оплаты);
      endif
    else (нет)
      :Продолжить ожидание / информирование клиента;
    endif
  endif
endif
}
partition "Система" {
  :Отслеживание статуса доставки;
  :Обновление статуса доставки;
  :Передача клиенту уведомлений о каждом изменении статуса\n(подтверждение, отправка, доставка);
}
partition "Клиент"  {
  :Получение уведомлений: подтверждение, отправка, доставка;
}

stop
@enduml
